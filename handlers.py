import hashlib
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from questions import get_question
from gpt_helper import ask_gpt
from certificate import generate_certificate  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
from aiogram.fsm.state import State, StatesGroup  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º State –∏ StatesGroup
router = Router()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_scores = {}
user_progress = {}

def safe_callback_data(option_text):
    return hashlib.md5(option_text.encode()).hexdigest()[:16]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–∑–º–µ–Ω—è–µ–º, —á—Ç–æ–±—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å "–í–∏–∫—Ç–æ—Ä–∏–Ω—É")
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìú –û–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∞–≤–∏–ª–∞")] # "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞" –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    ],
    resize_keyboard=True
)

menu_keyboard_quiz_active = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìú –û–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∞–≤–∏–ª–∞")],
        [KeyboardButton(text="üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")],
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìú –û–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∞–≤–∏–ª–∞"
@router.message(lambda message: message.text == "üìú –û–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∞–≤–∏–ª–∞")
async def show_rules(message: types.Message):
    rules_text = (
        "üß† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Quiz!\n\n"
        "üîπ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ AI.\n"
        "üîπ –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–∞–ª–ª—ã.\n"
        "üîπ –ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–π.\n"
        "üîπ –í –∫–æ–Ω—Ü–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.\n\n"
        "üí° –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ 'üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞'!"
    )
    await message.answer(rules_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞" (–Ω–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã)
@router.message(lambda message: message.text == "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def start_quiz(message: types.Message):
    user_id = message.from_user.id
    user_scores[user_id] = 0  # –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç
    user_progress[user_id] = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å

    await message.answer("üß† –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!", reply_markup=menu_keyboard)
    await send_question(message, user_id)




# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
async def send_question(message: types.Message, user_id: int):
    index = user_progress.get(user_id, 0)
    question_data = get_question(index)

    if question_data is None:
        await message.answer(
            f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {user_scores[user_id]} –±–∞–ª–ª–æ–≤.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üéì –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")]],
                resize_keyboard=True
            )
        )
        return

    if question_data:
        question_text, options, correct_answer, hint = question_data

        emoji_numbers = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ —ç–º–æ–¥–∑–∏
        question_text_formatted = f"üßê –í–æ–ø—Ä–æ—Å {index + 1}:\n\n{question_text}\n\n"
        for i, option in enumerate(options):
            question_text_formatted += f"{emoji_numbers[i]} {option}\n"

        # Inline-–∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=str(i), callback_data=f"answer_{i}") for i in range(1, len(options) + 1)]
            ] + [[InlineKeyboardButton(text="ü§î –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="show_hint")]]
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        user_progress[user_id] = (index, correct_answer)

        await message.answer(question_text_formatted, reply_markup=keyboard)





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
@router.callback_query(lambda c: c.data.startswith("answer_"))
async def check_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    index, correct_answer = user_progress.get(user_id, (0, None))
    question_data = get_question(index)

    if not question_data:
        await callback.answer("–û—à–∏–±–∫–∞! –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    _, options, correct_answer, _ = question_data  # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_choice = int(callback.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ "answer_"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (–ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–µ)
    correct_index = options.index(correct_answer) + 1  # +1, —Ç–∞–∫ –∫–∞–∫ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 1

    if user_choice == correct_index:
        user_scores[user_id] += 1
        text = "‚úÖ –í–µ—Ä–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
    else:
        text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_index}. {correct_answer}"

    await callback.message.answer(text)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    user_progress[user_id] = index + 1

    await send_question(callback.message, user_id)


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –§–ò–û
class CertificateState(StatesGroup):
    waiting_for_name = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
@router.message(lambda message: message.text == "üéì –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
async def request_certificate(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é –ò–º—è –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:")
    await state.set_state(CertificateState.waiting_for_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û
@router.message(CertificateState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.text
    user_score = user_scores.get(user_id, 0)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–ª—ã

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    certificate_path = generate_certificate(user_name, user_score)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    await message.answer_document(types.FSInputFile(certificate_path), caption="üéì –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
    await message.answer(
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É—á–∏—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Ü–µ–ª—ã–π –≥–æ–¥, –ø—Ä–æ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: "
        "[VK –ö–ª—É–± 1–°](https://vk.com/1c_club_kostroma?ref=group_menu&w=app6094020_-96428497)",
        parse_mode="Markdown"
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    await message.answer("–ú–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â–µ —Ä–∞–∑", reply_markup=menu_keyboard_quiz_active)

    await state.clear()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "ü§î –ü–æ–¥—Å–∫–∞–∑–∫–∞"
@router.callback_query(lambda c: c.data == "show_hint")
async def show_hint(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    index, _ = user_progress.get(user_id, (0, None))

    question_data = get_question(index)

    if question_data:
        _, _, _, hint = question_data  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        await callback.message.answer(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n\n{hint}")
    else:
        await callback.message.answer("üö´ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
def setup_handlers(dp):
    dp.include_router(router)